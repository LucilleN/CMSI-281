{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf600
{\fonttbl\f0\fmodern\fcharset0 Courier;\f1\fmodern\fcharset0 Courier-Bold;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;\red0\green0\blue117;
\red83\green85\blue2;\red82\green0\blue83;\red16\green121\blue2;\red11\green84\blue83;\red38\green38\blue38;
}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c100000\c100000\c100000;\cssrgb\c0\c0\c53333;
\cssrgb\c40000\c40000\c0;\cssrgb\c40000\c0\c40000;\cssrgb\c0\c53333\c0;\cssrgb\c0\c40000\c40000;\cssrgb\c20000\c20000\c20000;
}
\margl1440\margr1440\vieww19020\viewh12020\viewkind0
\deftab720
\pard\pardeftab720\sl360\partightenfactor0

\f0\fs26 \cf2 \cb3 \expnd0\expndtw0\kerning0
//Jenna Berlinberg and Lucille Njoo\
//Classwork 5\
\
//\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
//UNIQUEWORDS\
//worst case is when String words is very large\
	public static void main (String[] args) \{\
          Scanner input = new Scanner(System.in);			//c0\
          System.out.println("Enter a sentence."); 		//c1\
          \
          String[] words = input.nextLine().split(" ");		//c2*O(n)\
          int count = 0;								//c9\
          boolean unique;								//c10\
          for (int i = 0; i < words.length; i++) \{ 		//c3*n\
              unique = true;\
              for (int j = i + 1; j < words.length; j++) \{	//c4*n*n\
                  if (words[i].equals(words[j])) \{			//c5*n*n\
                      unique = false;					//c6*n*n\
                      break;							//c7*n*n\
                  \}\
              \}\
              if (unique) \{count++;\}						//c8*n\
          \}\
          System.out.println("There are " + count + " unique words in that sentence."); 	//c9\
          input.close();								//c11\
	\}\
//T(n) = constants + n(constants) + O(n)(constant) + n^2(constants)\
\pard\pardeftab720\sl360\partightenfactor0

\f1\b \cf2 //T(n) = O(n^2) 
\f0\b0 \
//quadratic\
\
//\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
\pard\pardeftab720\sl360\partightenfactor0
\cf2 //INTLIST\
//worst case is when size is very large\
\pard\pardeftab720\sl280\partightenfactor0

\fs24 \cf2     public int getAt (int index) \{\
        indexValidityCheck(index, 0, size);				//c3 
\fs26 = O(1)
\fs24 \
        return items[index];							//c4\
    \}\
//T(n) = c3 + c4 = O(1) + c4 = constants\

\f1\b //T(n) = O(1)
\f0\b0 \
//constant\
\pard\pardeftab720\sl360\partightenfactor0

\fs26 \cf2 \
\pard\pardeftab720\sl280\partightenfactor0

\fs24 \cf2     public void insertAt (int toAdd, int index) \{\
        indexValidityCheck(index, 0, size + 1); 			//c5\
        size++;									//c6\
        checkAndGrow();								//c12 = O(n)\
        shiftRight(index);							//c15 = O(n)\
        items[index] = toAdd;							//c16\
    \}\
//T(n) = constants + c12 + c15 = constants + O(n) + O(n)\

\f1\b //T(n) = O(n)
\f0\b0 \
//linear\
\
	private void indexValidityCheck (int index, int lower, int upper) \{\
        if (index < lower || index >= upper) \{			//c1\
            throw new IndexOutOfBoundsException(); 		//assume this won\'92t happen and that the index is valid\
        \}\
    \}\
//T(n) = c1 + c2 \
//T(n) = O(1)\
//constant\
\
    private void checkAndGrow () \{\
        // Case: big enough to fit another item, so no\
        // need to grow\
        if (size < items.length) \{						\
            return;\
        \}\
        \
        // Case: we're at capacity and need to grow\
        // Step 1: create new, bigger array; we'll\
        // double the size of the old one\
        int[] newItems = new int[items.length * 2];		//c8\
        \
        // Step 2: copy the items from the old array\
        for (int i = 0; i < items.length; i++) \{			//c9*n\
            newItems[i] = items[i];					//c10*n\
        \}\
        \
        // Step 3: update IntList reference\
        items = newItems;							//c11\
    \}\
//T(n) = constants + n(constants)\
//T(n) = O(n)\
//linear\
\
    private void shiftRight (int index) \{\
        for (int i = size; i > index; i--) \{				//c13*n\
            items[i] = items[i-1];						//c14*n\
        \}\
    \}\
//T(n) = n(c13 + c14)\
//T(n) = O(n)\
//linear\
\
//
\fs26 \'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97
\fs24 \
\pard\pardeftab720\sl360\partightenfactor0

\fs26 \cf2 //INTLINKEDLIST\
//worst case is when size is very large\
\pard\pardeftab720\sl280\partightenfactor0

\fs24 \cf2 	public void prepend (int toAdd) \{\
        Node currentHead = head;						//c1\
        head = new Node(toAdd);						//c2\
        head.next = currentHead;						//c3\
        size++;									//c5\
    \}\
//T(n) = c1 + c2 + c3 + c4\

\f1\b //T(n) = O(1)
\f0\b0 \
//constant\
    \
//worst case is when index is very large\
    public Iterator getIteratorAt (int index) \{\
        if (index > size || index < 0) \{				//c6\
            throw new IllegalArgumentException();			\
        \}\
        Iterator it = new Iterator ();					//c8\
        while (index > 0) \{							//c9*n\
            it.next();								//c10*n = O(1)*n\
            index--;								//c11*n\
        \}\
        return it;									//c12\
    \}\
//T(n) = constants  + n(constants) + n(O(1)) \

\f1\b //T(n) = O(n)
\f0\b0 \
\pard\pardeftab720\sl360\partightenfactor0

\fs26 \cf2 //linear\
\
\pard\pardeftab720\sl280\partightenfactor0

\fs24 \cf2     public class Iterator \{
\fs26 \

\fs24  		public void next () \{\
          	if (current == null) \{return;\}			\
         	 	current = current.next;					//c13\
       	\}\
\pard\pardeftab720\sl360\partightenfactor0

\fs26 \cf2 	\}\
//T(n) = c13\
//T(n) = O(1)\
//constant\
}